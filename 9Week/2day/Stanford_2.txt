1 --Find the names of all reviewers who rated Gone with the Wind. 

SELECT DISTINCT name
FROM reviewer
LEFT JOIN rating USING (rID)
LEFT JOIN movie USING (mID)
WHERE movie.title = "Gone with the Wind"

<------------------------------------------------------------->
2 --For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 
SELECT name, title, stars
FROM rating
LEFT JOIN movie USING (mID)
LEFT JOIN reviewer USING (rID)
WHERE movie.director = reviewer.name

<--------------------------------------------------------------------->
3 --Return all reviewer names and movie names together in a single list, alphabetized.
 (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

SELECT * FROM ( SELECT title FROM Movie UNION SELECT name FROM Reviewer)

<--------------------------------------------------------------------->
4 --Find the titles of all movies not reviewed by Chris Jackson. 
// Szelektálok egy csoportból amit elõtte már megszelektáltam
SELECT title
FROM Movie
WHERE mId NOT IN (
  SELECT mId
  FROM Rating
  INNER JOIN Reviewer USING(rId)
  WHERE name = "Chris Jackson"
);

<--------------------------------------------------------------------->
5 --For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. 
Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. 
For each pair, return the names in the pair in alphabetical order. 

<---------------------------------------------------------------------->
6 --For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. 

SELECT name, title, stars
FROM reviewer
LEFT JOIN rating USING (rID)
LEFT JOIN movie USING (mID)
WHERE stars = (SELECT MIN(stars) FROM rating)

<--------------------------------------------------------------------->
7 --List movie titles and average ratings, from highest-rated to lowest-rated. 
If two or more movies have the same average rating, list them in alphabetical order. 

SELECT title, AVG(stars) AS average
FROM movie
INNER JOIN rating USING (mID)
GROUP BY mID
ORDER BY average DESC, title

<--------------------------------------------------------------------->
8 --Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

SELECT name
FROM reviewer
LEFT JOIN rating USING (rID)
GROUP BY rID
HAVING COUNT(*) >= 3

<---------------------------------------------------------------------->
9 --Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)

<----------------------------------------------------------------------->
10--Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 

SELECT title, AVG(stars) AS average
FROM Movie
INNER JOIN Rating USING(mId)
GROUP BY mId
HAVING average = (
  SELECT MAX(average_rating)
  FROM (
    SELECT title, AVG(stars) AS average_rating
    FROM Movie
    INNER JOIN Rating USING(mId)
    GROUP BY mId
  )
);

<-------------------------------------------------------------------------->
11--Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating

SELECT title, AVG(stars) AS average
FROM Movie
INNER JOIN Rating USING(mId)
GROUP BY mId
HAVING average = (
  SELECT MIN(average_rating)
  FROM (
    SELECT title, AVG(stars) AS average_rating
    FROM Movie
    INNER JOIN Rating USING(mId)
    GROUP BY mId
  )
);

<-------------------------------------------------------------------------->
12--For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.

SELECT director, title, MAX(stars)
FROM movie
INNER JOIN rating USING (mID)
GROUP BY director
HAVING director IS NOT NULL









